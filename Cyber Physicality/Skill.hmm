Library "Phys"
//
	public static bool Psy = false;
//

Code "No attacking"
//
    #include "Reflection" noemit

    #lib "Player"
    #lib "Reflection"
    #lib "SonicParameters"

    static bool isDash = false;
//
{
    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    float currentSpeed = Player.Kinematics.GetHorizontalMagnitude();

	// NOTICE (Hyper): this will only apply to Sonic, let me know if you need this to affect other characters.
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
	
    if (currentSpeed >= 5.0f)
    {
        if (!isDash)
        {
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitNotExistTarget[0], SonicParameters.Action.Root);
            isDash = true;
		}
    }
    else if (currentSpeed <= 5.0f)
    {
        RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitNotExistTarget[0], SonicParameters.Action.AcceleCombo1);
        isDash = false;
    }
}

Patch "Sonic damage no boost ver" by "Proto"
//
	#include "BlackboardStatus" noemit
    #include "Reflection" noemit

    #lib "Player"
    #lib "Reflection"
    #lib "SonicParameters"

    static bool isDash = false;
//
{
    Sonic.StateID NotifyStateRunDamageCollision(Sonic.StateID in_stateId, Sonic.StateID[] in_stateStackTrace)
    {
		bool isStateRun = in_stateId == Sonic.StateID.StateRun;
		
		float currentSpeed = Player.Kinematics.GetHorizontalMagnitude();

		if (isStateRun)
		{
			if (currentSpeed >= 70.0f)
			{
				Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 1.0f);
				Player.Collision.SetEntityCollision(false);
				isDash = true;
			}
		}
		else if (isDash)
		{
			Player.Collision.SetCollisionSphere(Player.CollisionType.Default, 1.0f);
			Player.Collision.SetEntityCollision(true);
			isDash = false;
		}

        return in_stateId;
    }

    Player.State.AddStateNotifyAction<Sonic.StateID>(NotifyStateRunDamageCollision);
}

Code "Dynamic Dropdash Damage"
//
    #include "Reflection" noemit

    #lib "Player"
    #lib "Reflection"
    #lib "SonicParameters"
	#lib "Time"
	
	static float SpinDashDamage = 0;
//
{
    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;
	
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;

    float currentSpeed = Player.Kinematics.GetHorizontalMagnitude();

	if (SpinDashDamage > 0)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, (currentSpeed / 30.0f + 0.78f));
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.attributes, 0);
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, (currentSpeed / 30.0f + 0.35f));
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, (currentSpeed / 2.2f));
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 3.0f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.attributes, 32);
	}
	if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge)
	{
		SpinDashDamage = 1;
	}
	else
	{
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash || (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost))
		{
			if (SpinDashDamage > 0)
			{
				SpinDashDamage -= Time.GetDeltaTime();
			}
		}
		else
		{
			SpinDashDamage = 0;
		}
	}
}

// Vastly Improved Skill System

Code "Smash over Loopkick" in "My changes" by "Me" does "Does what it says"
//
    #lib "Player"
	#lib "BlackboardStatus"
//
{
	if (BlackboardStatus.IsSuper())
	{
		Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateLoopKick, Sonic.StateID.StateLoopKick);
	}
	else
	{
		Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateLoopKick, Sonic.StateID.StateSmash);
	}
}

Code "LoopKick over Smash" in "My changes" by "Me" does "Does what it says" 
//
    #lib "Player"
//
{
    Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateSmash, Sonic.StateID.StateLoopKick);
}

Code "Smash over SmashSS" in "My changes" by "Me" does "Does what it says"
//
    #lib "Player"
//
{
    Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateSmashSS, Sonic.StateID.StateLoopKick);
}

Code "Advanced Crasher"
//
	#include "Reflection" noemit

	#lib "Player"
	#lib "Reflection"
	#lib "SonicParameters"
	#lib "Time"
	
	static int Combo = 0;
	static bool IsAttacked = false;
	static float ComboDrain = 0;
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;
	
	if (Combo >= 10)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[4], SonicParameters.Action.Crasher);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[4], SonicParameters.Action.Crasher);
	}
	else if (Combo >= 5)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[4], SonicParameters.Action.Crasher);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[4], SonicParameters.Action.Pursuit);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[4], SonicParameters.Action.Crasher);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[4], SonicParameters.Action.Pursuit);
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[4], SonicParameters.Action.Pursuit);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[4], SonicParameters.Action.Pursuit);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[4], SonicParameters.Action.Pursuit);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[4], SonicParameters.Action.Pursuit);
	}

	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.crasher.damageRate, (Combo / 100.0f + 1.35f));

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateCrasher)
	{
		if (!IsAttacked)
		{
			Combo++;
			IsAttacked = true;
		}
	}
	else
	{
		IsAttacked = false;
	}

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOff)
	{
		Combo = 0;
	}

	if (Combo <= 3)
	{
		ComboDrain = 0.0f;
	}
	else if (Combo > 10 && ComboDrain < 3.0f)
	{
		ComboDrain += Time.GetDeltaTime();
	}
	
	if (ComboDrain >= 3)
	{
		Combo--;
		ComboDrain = 0.0f;
	}
}

Code "Advanced SpinSlash"
//
	#include "Reflection" noemit

	#lib "Player"
	#lib "Reflection"
	#lib "SonicParameters"
	#lib "Time"
	
	static int Combo = 0;
	static bool IsAttacked = false;
	static float ComboDrain = 0;
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;
	
	if (Combo >= 10)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[3], SonicParameters.Action.SpinSlash);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[3], SonicParameters.Action.SpinSlash);
	}
	else if (Combo >= 5)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[3], SonicParameters.Action.SpinSlash);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[3], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[3], SonicParameters.Action.SpinSlash);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[3], SonicParameters.Action.Root);
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[3], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[3], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[3], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[3], SonicParameters.Action.Root);
	}

	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinSlash.damageRate, (Combo / 100.0f + 0.17f));
	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinSlashLast.damageRate, (Combo / 100.0f + 0.34f));

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinSlash)
	{
		if (!IsAttacked)
		{
			Combo++;
			IsAttacked = true;
		}
	}
	else
	{
		IsAttacked = false;
	}

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOff)
	{
		Combo = 0;
	}

	if (Combo <= 0)
	{
		ComboDrain = 0;
	}
	else if (Combo > 10 && ComboDrain < 3.0f)
	{
		ComboDrain += Time.GetDeltaTime();
	}
	
	if (ComboDrain >= 3)
	{
		Combo -= 2;
		ComboDrain = 0.0f;
	}
}

Code "Advanced LoopKick"
//
	#include "Reflection" noemit

	#lib "Player"
	#lib "Reflection"
	#lib "SonicParameters"
	#lib "Time"
	
	static int Combo = 0;
	static bool IsAttacked = false;
	static float ComboDrain = 0;
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;
	
	if (Combo >= 10)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[5], SonicParameters.Action.Smash);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[5], SonicParameters.Action.Smash);
	}
	else if (Combo >= 5)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[5], SonicParameters.Action.Smash);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[5], SonicParameters.Action.Smash);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[5], SonicParameters.Action.Root);
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[5], SonicParameters.Action.Root);
	}

	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.loopKick.damageRate, (Combo / 100.0f + 0.45f));

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateLoopKick)
	{
		if (!IsAttacked)
		{
			Combo++;
			IsAttacked = true;
		}
	}
    	else
    	{
		IsAttacked = false;
	}

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOff)
	{
		Combo = 0;
	}

	if (Combo <= 0)
	{
		ComboDrain = 0;
	}
	else if (Combo > 10 && ComboDrain < 3.0f)
	{
		ComboDrain += Time.GetDeltaTime();
	}
	
	if (ComboDrain >= 3)
	{
		Combo -= 2;
		ComboDrain = 0.0f;
	}
}

Code "Advanced Quick Cyloop"
//
	#include "Reflection" noemit

	#lib "Player"
	#lib "Reflection"
	#lib "SonicParameters"
	#lib "Time"
	
	static int Combo = 0;
	static bool IsAttacked = false;
	static float ComboDrain = 0;
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;
	
	if (Combo >= 10)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[2], SonicParameters.Action.QuickCyloop);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[2], SonicParameters.Action.QuickCyloop);
	}
	else if (Combo >= 5)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[2], SonicParameters.Action.QuickCyloop);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[2], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[2], SonicParameters.Action.QuickCyloop);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[2], SonicParameters.Action.Root);
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitExistTarget[2], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitExistTarget[2], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo3.transitInAir[2], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.acceleCombo2.transitInAir[2], SonicParameters.Action.Root);
	}

	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.cyloopQuick.damageRate, (Combo / 100.0f + 0.5f));

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateQuickCyloop)
	{
		if (!IsAttacked)
		{
			Combo++;
			IsAttacked = true;
		}
	}
	else
	{
		IsAttacked = false;
	}

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOff)
	{
		Combo = 0;
	}

	if (Combo <= 3)
	{
		ComboDrain = 0;
	}
	else if (Combo > 6 && ComboDrain < 10)
	{
		ComboDrain += Time.GetDeltaTime();
	}
	
	if (ComboDrain >= 10)
	{
		Combo--;
		ComboDrain = 0.0f;
	}
}

Code "Advanced Finisher"
//
	#include "Reflection" noemit

	#lib "Player"
	#lib "Reflection"
	#lib "SonicParameters"
	#lib "Time"
	
	static int Combo = 0;
	static bool IsAttacked = false;
	static float ComboDrain = 0;
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;

	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinish.damageRate, (Combo / 25.0f + 0.4f));
	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishF.damageRate, (Combo / 25.0f + 0.4f));
	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishB.damageRate, (Combo / 25.0f + 0.4f));
	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishL.damageRate, (Combo / 25.0f + 0.4f));
	RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishR.damageRate, (Combo / 25.0f + 0.4f));

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingFinish)
	{
		if (!IsAttacked)
		{
			Combo++;
			IsAttacked = true;
		}
	}
    	else
    	{
		IsAttacked = false;
	}

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOff)
	{
		Combo = 0;
	}

	if (Combo <= 0)
	{
		ComboDrain = 0;
	}
	else if (Combo > 0 && ComboDrain < 3.0f)
	{
		ComboDrain += Time.GetDeltaTime();
	}
	
	if (ComboDrain >= 3.0f)
	{
		Combo--;
		ComboDrain = 0.0f;
	}
}

Code "Better Super Sonic Parry"
//
	#include "Reflection" noemit

	#lib "BlackboardStatus"
	#lib "Lua"
	#lib "Player"
	#lib "Reflection"
	#lib "SonicParameters"
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;
		
	if (!BlackboardStatus.IsSuper())
	{
        for (int i = 0; i < 4; i++)
		    RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.maxRecieveTimes[0], Lua.Call<int>("GetGuardLevel", 0) / 70 + 0.8f);
			 RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.maxRecieveTimes[1], Lua.Call<int>("GetGuardLevel", 0) / 80 + 0.5f);
			  RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.maxRecieveTimes[2], Lua.Call<int>("GetGuardLevel", 0) / 100 + 0.3f);
			   RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.maxRecieveTimes[3], Lua.Call<int>("GetGuardLevel", 0) / 100 + 0.1f);

		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.minRecieveTime, 0.001f);
	}
	else
	{
        for (int i = 0; i < 4; i++)
		    RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.maxRecieveTimes[i], 3.0f);
			RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.justRecieveTimes[0], 1.0f);
			RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.justRecieveTimes[1], 0.7f);
			RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.justRecieveTimes[2], 0.5f);
			RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.justRecieveTimes[3], 0.08f);

		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.minRecieveTime, 0.01f);
	}
}

Code "Better Bumper Actions"
//
	#include "BlackboardStatus" noemit

	#lib "Player"
	#lib "BlackboardStatus"
	#lib "Lua"
	#lib "Time"
	#lib "Phys"
	
	static float Parries = 1;
	static bool Parried = false;
	static float Cooldown = 3.8f;
	static bool Fail = false;
//
{
	Phys.Psy = true;
	if (Player.GetPlayerType() != Player.PlayerType.Sonic && Player.GetPlayerType() != Player.PlayerType.Amy)
        return;

    var guardLv = Lua.Call<int>("GetGuardLevel", 0);

	Player.State.Discard<Sonic.StateID>(Sonic.StateID.StateAvoid);
	Player.State.Discard<Sonic.StateID>(Sonic.StateID.StateParry);

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    float currentSpeed = Player.Kinematics.GetHorizontalMagnitude();
	
	if (currentSpeed >= 20.0f)
	{
		Lua.Call("SetPlayerAbilityEnabled", "Parry", true);
	}
		
    if (!IS_WORLD_FLAG(IsCyberSpace))
    {
        if (!BlackboardStatus.IsSuper() && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFly && currentSpeed < 20.0f && Player.State.GetCurrentStateID<Tails.StateID>() != Tails.StateID.StateWaveCannon && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageBlowOff && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDead && (Player.Input.IsPressed(Player.InputActionType.PlayerRightStep) && (!Player.Input.IsDown(Player.InputActionType.PlayerLeftStep))))
        {
			Player.State.Restore<Sonic.StateID>(Sonic.StateID.StateAvoid);
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAvoid);
        }
		
		if (BlackboardStatus.IsSuper() && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateFly && currentSpeed < 140.0f && Player.State.GetCurrentStateID<Tails.StateID>() != Tails.StateID.StateWaveCannon && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageBlowOff && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDead && (Player.Input.IsPressed(Player.InputActionType.PlayerRightStep) && (!Player.Input.IsDown(Player.InputActionType.PlayerLeftStep))))
        {
			Player.State.Restore<Sonic.StateID>(Sonic.StateID.StateAvoid);
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAvoid);
        }
		
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && Player.State.GetCurrentStateID<Tails.StateID>() != Tails.StateID.StateWaveCannon && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDamageBlowOff && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateDead && (Player.Input.IsPressed(Player.InputActionType.PlayerRightStep) && (!Player.Input.IsDown(Player.InputActionType.PlayerLeftStep))))
        {
			Player.State.Restore<Sonic.StateID>(Sonic.StateID.StateAvoid);
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAvoid);
        }
    }
	
    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSquat)
    {
		Lua.Call("SetPlayerAbilityEnabled", "Parry", false);// ?
    }
	else
	{
		if (Parries > 0)
		{
			if (currentSpeed < 20.0f)
			{
				Player.State.Restore<Sonic.StateID>(Sonic.StateID.StateParry);
				Lua.Call("SetPlayerAbilityEnabled", "Parry", true);
			}
		}
		else
		{
			Lua.Call("SetPlayerAbilityEnabled", "Parry", false);
		}
		
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateParry && currentSpeed < 20.0f)
		{
			if (!Parried)
			{
				Parries--;
				Parried = true;
			}
		}
		else
		{
			Parried = false;
		}
		
		if (Cooldown >= 4)
		{
			Cooldown = 0;
			Parries = (guardLv / 16 + 1);

			if (Fail)
			{
				Player.Sound.PlaySound("sn_skateboard_change")
				Fail = false;
			}
		}
		
		if (Parries < (guardLv / 16 + 1) && Cooldown < 4)
		{
			Cooldown += Time.GetDeltaTime();
		}
		
		if (Parries == 0)
		{
			if (!Fail)
			{
				Cooldown = 0;
				Player.Sound.PlaySound("sys_boostgage_overheat")
			}

			Fail = true;
		}
	}
		
	if (BlackboardStatus.IsSuper())
	{
		Parries = 3;
	}
}



Library "EnemyJellymanConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct Movement
    {
        [FieldOffset(0x00)] public float rotateSpeedMin;
        [FieldOffset(0x04)] public float rotateSpeedMax;
        [FieldOffset(0x08)] public float rotateSpeedMaxSpeedMin;
        [FieldOffset(0x0C)] public float rotateSpeedMinSpeedMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct Eyesight
    {
        [FieldOffset(0x00)] public float distance;
        [FieldOffset(0x04)] public float angle;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct Fight
    {
        [FieldOffset(0x00)] public float attackRange;
        [FieldOffset(0x04)] public float attackAngle;
        [FieldOffset(0x08)] public float attackSpeed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct EnemyJellymanModeConfig
    {
        [FieldOffset(0x00)] public Movement movement;
        [FieldOffset(0x10)] public Eyesight eyesight;
        [FieldOffset(0x18)] public Fight fight;
        [FieldOffset(0x24)] public float transformRate;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct JellymanHumanCommonConfig
    {
        [FieldOffset(0x00)] public EnemyJellymanModeConfig common;
        [FieldOffset(0x28)] public unsafe fixed float actionDistance[5];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct RingParameter
    {
        [FieldOffset(0x00)] public float suckedTime;
        [FieldOffset(0x04)] public float launchAngle;
        [FieldOffset(0x08)] public float launchMaxSpeed;
        [FieldOffset(0x0C)] public float launchMinSpeed;
        [FieldOffset(0x10)] public float randomRangeMin;
        [FieldOffset(0x14)] public float randomRangeMax;
        [FieldOffset(0x18)] public float lifeTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum VolumeShape : sbyte
    {
        SPHERE = 0,
        BOX = 1,
        CYLINDER = 2,
        CAPSULE = 3,
        NUM = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct VolumeInfo
    {
        [FieldOffset(0x00)] public Vector3 volumeSize;
        [FieldOffset(0x10)] public Vector3 volumeOffset;
        [FieldOffset(0x20)] public Vector3 volumeRotation;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xB0)]
    public struct MappingPairInfo
    {
        [FieldOffset(0x00)] public UnmanagedString tagName;
        [FieldOffset(0x10)] public sbyte pieceNum;
        [FieldOffset(0x14)] public float pieceFuncFactor;
        [FieldOffset(0x18)] public VolumeShape volumeShape;
        [FieldOffset(0x20)] public UnmanagedString humanNodeName;
        [FieldOffset(0x30)] public VolumeInfo humanVolume;
        [FieldOffset(0x60)] public UnmanagedString eggNodeName;
        [FieldOffset(0x70)] public VolumeInfo eggVolume;
        [FieldOffset(0xA0)] public bool effectActive;
        [FieldOffset(0xA1)] public bool debugDraw;
        [FieldOffset(0xA2)] public bool debugDrawVolumeAxis;
        [FieldOffset(0xA3)] public bool debugDrawAxis;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1670)]
    public struct EnemyCommonConfig
    {
        [FieldOffset(0x00)] public JellymanHumanCommonConfig human;
        [FieldOffset(0x3C)] public RingParameter ringParam;
        [FieldOffset(0x58)] public int codeDropNumMin;
        [FieldOffset(0x5C)] public int codeDropNumMax;
        [FieldOffset(0x60)] public int codeXDropNumMin;
        [FieldOffset(0x64)] public int codeXDropNumMax;
        [FieldOffset(0x70)] public unsafe fixed byte /* MappingPairInfo[32] */ _mappingPairInfo[5632];

        public unsafe MappingPairInfo* mappingPairInfo
        {
            get
            {
                fixed (byte* p_mappingPairInfo = _mappingPairInfo)
                    return (MappingPairInfo*)p_mappingPairInfo;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct JellymanCommonLevelConfig
    {
        [FieldOffset(0x00)] public int maxHealthPoint;
        [FieldOffset(0x04)] public unsafe fixed float maxStunPoint[3];
        [FieldOffset(0x10)] public float stunDecreaseStartTime;
        [FieldOffset(0x14)] public float stunDecreaseSpeed;
        [FieldOffset(0x18)] public unsafe fixed float maxStaggerPoint[3];
        [FieldOffset(0x24)] public float staggerDecreaseStartTime;
        [FieldOffset(0x28)] public float staggerDecreaseSpeed;
        [FieldOffset(0x2C)] public float stunTime;
        [FieldOffset(0x30)] public float attackRate;
        [FieldOffset(0x34)] public float attackMotionSpeed;
        [FieldOffset(0x38)] public ushort expItemNum;
        [FieldOffset(0x3A)] public ushort exp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct JellymanHumanLevelConfig
    {
        [FieldOffset(0x00)] public float wallTime;
        [FieldOffset(0x04)] public int wallLife;
        [FieldOffset(0x08)] public float guardTime;
        [FieldOffset(0x0C)] public float guardCoolTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct EnemyLevelConfig
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public JellymanCommonLevelConfig common;
        [FieldOffset(0x40)] public JellymanHumanLevelConfig human;
    }

    public enum SuperArmorType : sbyte
    {
        None = 0,
        Attack = 1,
        Always = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct JellymanCommonActionConfig
    {
        [FieldOffset(0x00)] public SuperArmorType superArmor;
        [FieldOffset(0x01)] public bool isTransform;
        [FieldOffset(0x04)] public float downTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct JellymanHumanActionRate
    {
        [FieldOffset(0x00)] public unsafe fixed float actionRate[5];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct JellymanHumanActionConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* JellymanHumanActionRate[4] */ _rateTable[80];

        public unsafe JellymanHumanActionRate* rateTable
        {
            get
            {
                fixed (byte* p_rateTable = _rateTable)
                    return (JellymanHumanActionRate*)p_rateTable;
            }
        }

        [FieldOffset(0x50)] public unsafe fixed float coolTime[5];
        [FieldOffset(0x64)] public float attackCoolTime;
        [FieldOffset(0x68)] public float nearRange;
        [FieldOffset(0x6C)] public int nearRateId;
        [FieldOffset(0x70)] public int farRateId;
        [FieldOffset(0x74)] public bool isCounterGuard;
        [FieldOffset(0x75)] public bool isCounterWall;
        [FieldOffset(0x76)] public bool isSpikeWall;
        [FieldOffset(0x78)] public int waveNum;
        [FieldOffset(0x7C)] public float waveUpTime;
        [FieldOffset(0x80)] public float waveLifeTime;
        [FieldOffset(0x84)] public float waveDownTime;
        [FieldOffset(0x88)] public float waveRadius;
        [FieldOffset(0x8C)] public float waveAddRadius;
        [FieldOffset(0x90)] public float waveSpawnTime;
        [FieldOffset(0x94)] public float waveKeepRadius;
        [FieldOffset(0x98)] public float waveHeight;
        [FieldOffset(0x9C)] public int rushNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xAC)]
    public struct EnemyLevelBandConfig
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public JellymanCommonActionConfig common;
        [FieldOffset(0x0C)] public JellymanHumanActionConfig human;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct EnemySquadAvarageLevelConfig
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public int maxActionCount;
        [FieldOffset(0x08)] public float spAttackWaitTime;
        [FieldOffset(0x0C)] public unsafe fixed int humanMaxActionCount[5];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct EnemySquadConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* EnemySquadAvarageLevelConfig[5] */ _averageLevelConfig[160];

        public unsafe EnemySquadAvarageLevelConfig* averageLevelConfig
        {
            get
            {
                fixed (byte* p_averageLevelConfig = _averageLevelConfig)
                    return (EnemySquadAvarageLevelConfig*)p_averageLevelConfig;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1CF0)]
    public struct Root
    {
        [FieldOffset(0x00)] public EnemyCommonConfig commonParams;
        [FieldOffset(0x1670)] public unsafe fixed byte /* EnemyLevelConfig[8] */ _levelParams[640];

        public unsafe EnemyLevelConfig* levelParams
        {
            get
            {
                fixed (byte* p_levelParams = _levelParams)
                    return (EnemyLevelConfig*)p_levelParams;
            }
        }

        [FieldOffset(0x18F0)] public unsafe fixed byte /* EnemyLevelBandConfig[5] */ _levelBands[860];

        public unsafe EnemyLevelBandConfig* levelBands
        {
            get
            {
                fixed (byte* p_levelBands = _levelBands)
                    return (EnemyLevelBandConfig*)p_levelBands;
            }
        }

        [FieldOffset(0x1C4C)] public EnemySquadConfig squadParams;
    }

}

Code "Fixed Platforming Soldiers" by "DatSquishyFello"
//
	#include "Reflection" noemit

	#lib "Reflection"
	#lib "EnemyJellymanConfig"

    #import "Services"
	
//

{
	var EnemyJellymanConfigInfo = Reflection.GetDataInfo<EnemyJellymanConfig.Root>("enm_jellyman");

	if (EnemyJellymanConfigInfo.pData == null)
		return;
	
	if (LevelInfo.GetCurrentStageID() == "w1r03")
	{
		RFL_SET_PARAM(EnemyJellymanConfigInfo, levelParams[0].common.maxHealthPoint, 35);	
	}
	else
	{
		RFL_SET_PARAM(EnemyJellymanConfigInfo, levelParams[0].common.maxHealthPoint, 1);				
	}
}