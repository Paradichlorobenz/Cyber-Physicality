Patch "RFL fix" by "Trepe"
//
    #include "Reflection" noemit

    #lib "Reflection"
    #lib "SonicParameters"
//
{
var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

    if (SonicParametersInfo.pData == null)
    return;

    RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.speed.normal.min, 0.5f);
}

Code "Dropdash Roll over Spinboost with hold" in "My changes" by "Weezley" does "Allows you to use the dropdash when you try spindashing. Due to not giving itself it's own velocity, it works as a roll" 
//
    #lib "Player"
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;


    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost && Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
    {
        Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateRun : Sonic.StateID.StateFall)
    }
	
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost && !Player.Input.IsDown(Player.InputActionType.PlayerSonicboom))
	{
		Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateRun : Sonic.StateID.StateFall)
	}
}

Code "Dropdash Roll over Spinmove with hold" in "My changes" by "Weezley" does "Allows you to use the dropdash when you try spindashing. Due to not giving itself it's own velocity, it works as a roll" 
//
    #lib "Player"
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;

    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinMove && Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
    {
        Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateRun : Sonic.StateID.StateFall)
    }
}

Code "Dropdash Roll over dropdash with hold" in "My changes" by "Weezley" does "Allows you to use the dropdash when you try spindashing. Due to not giving itself it's own velocity, it works as a roll" 
//
    #lib "Player"
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;
	
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash && !Player.Input.IsDown(Player.InputActionType.PlayerSonicboom))
	{
		Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateRun : Sonic.StateID.StateFall)
	}
}

Code "Dropdash Roll over Spindash with hold" in "My changes" by "Weezley" does "Allows you to use the dropdash when you try spindashing. Due to not giving itself it's own velocity, it works as a roll" 
//
    #lib "Player"
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;

    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost && Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
    {
        Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateRun : Sonic.StateID.StateFall)
    }
}

Code "Drop"
//
#lib "Player"
//
{
if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash && !Player.Input.IsDown(Player.InputActionType.PlayerSonicboom))
{
    Player.State.SetState<Sonic.StateID>
    (
        Player.Status.IsGrounded()
            ? Sonic.StateID.StateRun
            : Sonic.StateID.StateFall
    );
}
}

Code "Dropdash Roll over Spindash with hold" in "My changes" by "Weezley" does "Allows you to use the dropdash when you try spindashing. Due to not giving itself it's own velocity, it works as a roll" 
//
    #lib "Player"
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;

    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinMove && Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
    {
        Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateRun : Sonic.StateID.StateFall)
    }
}

Code "Dropdash Roll over Spindash with hold" in "My changes" by "Weezley" does "Allows you to use the dropdash when you try spindashing. Due to not giving itself it's own velocity, it works as a roll" 
//
    #lib "Player"
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;


    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash && Player.Input.IsReleased(Player.InputActionType.PlayerSonicboom))
    {
        Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateRun : Sonic.StateID.StateFall)
    }
}

Code "Legacy Spindash" in "Gameplay" by "Weezley" 
//
	#include "BlackboardStatus" noemit
	#include "Reflection" noemit

    #lib "BlackboardStatus"
    #lib "Memory"
    #lib "Player"
    #lib "Reflection"
	#lib "SonicParameters"
	#lib "Time"

    static bool IsInitialised = false;
    static bool IsVelocityAdded = false;

    static long SigSideViewFix = 0;

    static float chargeCount = 0.0f;
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;

    if (!IsInitialised)
    {
        SigSideViewFix = ScanSignature
        (
            "\x74\x10\x0F\x28\xCF",
            "xxxxx"
        );

        Memory.Preserve(SigSideViewFix, 5);

        IsInitialised = true;
    }

	bool isCyberSpace = IS_WORLD_FLAG(IsCyberSpace);

    Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateSpinBoost, Sonic.StateID.StateDropDash);

    var currentState = Player.State.GetCurrentStateID<Sonic.StateID>();
    var previousState = Player.State.GetPreviousStateID<Sonic.StateID>();

    if (!Player.Status.IsGrounded() && !isCyberSpace)
    {
        Player.State.Discard(Sonic.StateID.StateSpinBoostCharge);
    }
    else
    {
        Player.State.Restore(Sonic.StateID.StateSpinBoostCharge);
    }

    if (!Player.Status.IsGrounded() && !isCyberSpace)
    {
        // ?
    }
    else
    {
        Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateSpinBoostCharge, Sonic.StateID.StateSpinBoostCharge)
    }

    if (Player.Status.IsGrounded() && Player.Kinematics.GetHorizontalMagnitude() >= 30.0f) 
    {
	    Player.State.Discard(Sonic.StateID.StateSpinBoostCharge)
    }

    if (Player.Status.IsGrounded() && Player.Input.IsPressed(Player.InputActionType.PlayerSonicboom) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge && chargeCount < 12)
    {
        chargeCount += 1;
		Player.Effect.PlayEffect("boosting", "ec_ft_damage_down01_sa01_shake01");
    }
    else if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge && Player.Input.IsDown(Player.InputActionType.PlayerJump) && chargeCount < 12)
    {
		if (Player.Status.IsGrounded())
		{
			chargeCount += (Time.GetDeltaTime() * 9);
			Player.Effect.PlayEffect("boosting", "ec_ft_damage_down01_sa01_shake01");
		}
		if (!Player.Status.IsGrounded())
		{
			if (!Player.Status.IsGrounded())
			{
				if (chargeCount < 6)
				{
					chargeCount += 0.165f;
				}
			}
		}
    }
	
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge && chargeCount > 12.0f)
	{
		chargeCount = 12.0f;
	}
	
    if (previousState == Sonic.StateID.StateSpinBoostCharge && currentState == Sonic.StateID.StateSpinBoost && Player.Input.IsDown(Player.InputActionType.PlayerSonicboom))
    {
        if (!IsVelocityAdded && !isCyberSpace && !Player.Status.IsSideView())
        {
            var kinematics = Player.Kinematics.Get();

            if (kinematics == null)
                return;

            kinematics->Velocity += Player.Kinematics.GetForward() * (chargeCount * 2.5f + 10.0f);

            IsVelocityAdded = true;

            goto Reset;
        }

        if (!IsVelocityAdded && isCyberSpace && !Player.Status.IsSideView())
        {
            var kinematics = Player.Kinematics.Get();

            if (kinematics == null)
                return;

            kinematics->Velocity += Player.Kinematics.GetForward() * (chargeCount * 5.0f + 5.0f);

            IsVelocityAdded = true;

            goto Reset;
        }

	    if (!IsVelocityAdded && Player.Status.IsSideView())
        {
            var kinematics = Player.Kinematics.Get();

            if (kinematics == null)
                return;

            kinematics->Velocity += Player.Kinematics.GetForward() * (chargeCount * 2.0f + 5.0f);

            IsVelocityAdded = true;

            goto Reset;
        }

    Reset:
        chargeCount = 0;
    }
    else
    {
        IsVelocityAdded = false;
    }

    if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSpinBoostCharge)
    {
        chargeCount = 0;
    }

    bool isStompPressed = Player.Input.IsPressed(Player.InputActionType.PlayerStomping);

    if ((currentState == Sonic.StateID.StateSpinBoost || currentState == Sonic.StateID.StateDropDash) && isStompPressed)
    {
        Player.State.SetState<Sonic.StateID>(Player.Status.IsGrounded() ? Sonic.StateID.StateSpringJumpHeadLand : Sonic.StateID.StateFall);
    }

    if (Player.Status.IsSideView())
    {
        Memory.WriteForceJump(SigSideViewFix);
    }
    else
    {
        Memory.Restore(SigSideViewFix);
    }

    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if (SonicParametersInfo.pData == null)
		return;

    RFL_SET_PARAM(SonicParametersInfo, forwardView.dropDash.checkDashSpeed, 3.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.steeringSpeed1, 360.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.steeringSpeed2, 60.0f);
    RFL_SET_PARAM(SonicParametersInfo, cyberspace.dropDash.checkDashSpeed, 3.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspaceSV.dropDash.steeringSpeed1, 400.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspaceSV.dropDash.steeringSpeed2, 200.0f);
    RFL_SET_PARAM(SonicParametersInfo, cyberspaceSV.dropDash.checkDashSpeed, 3.0f);
	RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.jumpSpeed.limitUpSpeed, 80.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspace.modePackage.jumpSpeed.limitUpSpeed, 80.0f);
	RFL_SET_PARAM(SonicParametersInfo, cyberspaceSV.modePackage.jumpSpeed.limitUpSpeed, 80.0f);
}

Patch "Retain Horizontal Velocity from Jump" in "Physics" by "Hyper" does 
/*
Retains the player's horizontal velocity when jumping.

Notes;
- This will allow you to retain velocity when jumping out of a Drop Dash.
- The "Jump Deceleration" and "Maintain boost during a jump" options can remain active without conflicting with this code.
*/
//
    #lib "Memory"
    #lib "Player"

    static bool _isStateJump = false;
//
{
    fixed (bool* p_isStateJump = &_isStateJump)
    {
        // Update posture to allow retaining ground velocity.
        WriteAsmHook
        (
            $@"
                mov   rdi, rcx
                mov   rdx, {(long)p_isStateJump}
                cmp   byte ptr [rdx], 0
                je    default
                mov   al, 1
                jmp   exit
            default:
                xor   edx, edx
                mov   rcx, [rcx + 0x28] ; RCX = BlackboardStatus
                mov   eax, edx
                and   eax, 0x3F
                movzx r8d, al
                mov   eax, edx
                shr   rax, 6
                mov   rax, [rcx + rax * 8 + 0x38]
                bt    rax, r8
                setb  al
            exit:
            ",

            /* 0x1408B4846 */
            Memory.ReadCall
            (
                /* 0x1408F1A2C */
                ScanSignature
                (
                    "\xE8\xCC\xCC\xCC\xCC\x48\x8B\x43\x20\xBA\x20\x16\x1E\x71\x44\x0F\x28\xC0\x48\x8B\x88\x80\x00\x00\x00\xE8\xCC\xCC\xCC\xCC\x48\x8B\xC8\xE8\xCC\xCC\xCC\xCC\x48\x8B\xCB\x0F\x28\xF8\xE8\xCC\xCC\xCC\xCC\x48\x8B\xC8\xE8\xCC\xCC\xCC\xCC\x48\x8D\x55\xE7",
                    "x????xxxxxxxxxxxxxxxxxxxxx????xxxx????xxxxxxx????xxxx????xxxx"
                )
            )
            + 6,

            HookBehavior.Replace
        );
    }

    Sonic.StateID NotifyStateJump(Sonic.StateID in_stateId, Sonic.StateID[] in_stateStackTrace)
    {
        _isStateJump = (in_stateId == Sonic.StateID.StateJump) || (in_stateId == Sonic.StateID.StateGrindJump);

        return in_stateId;
    }

    Player.State.AddStateNotifyAction<Sonic.StateID>(NotifyStateJump);
}

Patch "Disable Power Boost" in "Gameplay/Skills/Sonic" by "Hyper" 
{
    WriteProtected<byte>
    (
        /* v1.41: 0x1409968F7 */
        ScanSignature
        (
            "\xB0\x01\xF3\x0F\x10\x47\x60",
            "xxxxxxx"
        ),

        Assemble("xor al, al")
    );
}

Patch "Disable Drop Dash Turning Delay" in "Physics/Sonic" by "Hyper" does "Disables the out of control timer that determines when Sonic can start turning whilst drop dashing." 
{
    WriteNop
    (
        /* 0x14084323B */
        ScanSignature
        (
            "\x73\x19\x48\x8B\x47\x40",
            "xxxxxx"
        ),

        2
    );
}
